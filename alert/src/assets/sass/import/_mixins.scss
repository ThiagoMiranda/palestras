// Generate color classes (Ex: .blue-base--text, .blue-base and .blue-base--background)
@mixin generateColorClasses($colorsMap) {
  @each $colorName, $children in $colorsMap {
    @if type-of($children) == color {
        .bg-#{$colorName} { background: $children; }
      .text-#{$colorName} { color:      $children; }
      .fill-#{$colorName} { fill:       $children; }
    } @else {
      @each $variation, $color in $children {
        .bg-#{$colorName}--#{$variation} { background: $color; }
      .text-#{$colorName}--#{$variation} { color:      $color; }
      .fill-#{$colorName}--#{$variation} { fill:       $color; }
      }
    }
  }
};

@mixin generateColorWithOpacityClasses($r, $g, $b, $colorName) {
  $opacity: 5;
  @for $i from 1 through 20 {
    .bg-#{$colorName}--opacity-#{$opacity} { background: rgba($r, $g, $b, $opacity / 100); }
    .text-#{$colorName}--opacity-#{$opacity} { color: rgba($r, $g, $b,  $opacity / 100); }
    $opacity: $opacity + 5;
  }
}

@mixin generateFontWeightClasses($fontWeights) {
  @each $fontWeightName, $fontWeightMap in $fontWeights {
    .fw-#{$fontWeightName} { font-weight: $fontWeightMap; }
  }
}

@mixin generateFontSizeClasses($fontSizes, $gridBreakpoints) {
  @each $fontSizeName, $fontSize in $fontSizes {
    .fs-#{$fontSizeName} {
      font-size: $fontSize;
    }
    @each $gridBreakpointName, $gridBreakpoint in $gridBreakpoints {
      @if $gridBreakpoint != 0 {
        .fs-#{$gridBreakpointName}-#{$fontSizeName} { 
          @media (min-width: $gridBreakpoint) {
            font-size: $fontSize;
          }      
        }      
      }
    }
  }
}

@mixin boxedStructure($corner-size, $corner-long, $font-size, $min-height) {
  background-size:
    $corner-size $corner-long,
    ($corner-long - $corner-size) $corner-size,
    $corner-size $corner-long,
    ($corner-long - $corner-size) $corner-size,
    $corner-size $corner-long,
    ($corner-long - $corner-size) $corner-size,
    $corner-size $corner-long,
    ($corner-long - $corner-size) $corner-size
  ;
  background-position: 
    left top,
    $corner-size top,
    left bottom,
    $corner-size bottom,
    right top,
    calc(100% - #{$corner-size}) top,
    right bottom,
    calc(100% - #{$corner-size}) bottom
  ;
  background-repeat: 
    no-repeat,
    no-repeat,
    no-repeat,
    no-repeat,
    no-repeat,
    no-repeat,
    no-repeat,
    no-repeat
  ;
  margin: 0 auto;
  max-width: 630px;
  min-height: $min-height;
  padding: $corner-size * 3;
}

@mixin boxedColor($color-one, $color-two) {
  background-image:
    linear-gradient($color-two, $color-two),
    linear-gradient($color-two, $color-two),
    linear-gradient($color-two, $color-two),
    linear-gradient($color-two, $color-two),
    linear-gradient($color-one, $color-one),
    linear-gradient($color-one, $color-one),
    linear-gradient($color-one, $color-one),
    linear-gradient($color-one, $color-one)
  ;
}